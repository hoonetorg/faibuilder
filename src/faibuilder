#!/usr/bin/env -S python3 -u
import logging

import os
import sys
import subprocess
import shlex
import shutil

from pathlib import Path

import pwd
import grp

import json

# GLOBALCONF = "/srv/fai/faibuilder.json"
HOSTCONF = "/srv/fai/host.json"
BASEFILESDIRPATH = "/srv/fai/basefiles"
FAICONFIGDIRPATH = "/srv/fai/config"
FAIMIRRORDIRPATH = "/srv/fai/mirror"
FAINFSROOTDIRPATH = "/srv/fai/nfsroot"
OUTPUTDIRPATH = "/srv/fai/output"


def subprocess_run_wrapper(
    cmd: str, dryrun: bool = False, **kwargs
) -> subprocess.CompletedProcess | None:
    if kwargs.get("shell"):
        wcmd = cmd
    else:
        wcmd = shlex.split(cmd)

    if dryrun:
        logging.info(f"[DRYRUN] {cmd}")
        return None

    logging.info(f"[EXECUTING] {cmd}")
    return subprocess.run(wcmd, **kwargs)


def get_path(path):
    return Path(path).expanduser().absolute()


def split_multi_ext(path: Path):
    suffixes = "".join(path.suffixes)
    if suffixes:
        stem = path.name[: -len(suffixes)]
        ext = suffixes.lstrip(".")
    else:
        stem = path.name
        ext = ""
    return stem, ext


def is_readable_file(file: Path) -> bool:
    return file.exists() and file.is_file() and os.access(file, os.R_OK)


def do_faimirror(faiclasses: list, faimirrordir: Path, dryrun: bool = False):
    marker_file = faimirrordir / "mirror-is-up-to-date"

    logging.info("[INFO] Checking mirror freshness")
    if not marker_file.is_file():
        logging.info("[INFO] Mirror is outdated or missing — running fai-mirror")

        subprocess_run_wrapper(
            cmd=(
                "fai-mirror -b -m1 "
                f"-c '{shlex.quote(','.join(faiclasses))},GRUB_PC,GRUB_EFI,AMD64,FAIBUILDER' "
                f"'{shlex.quote(str(faimirrordir))}'"
            ),
            dryrun=dryrun,
        )

        if not dryrun:
            logging.info(f"[INFO] Touching marker file: {str(marker_file)}")
            marker_file.touch()
    else:
        logging.info(f"[INFO] Mirror is up to date: {str(marker_file)}")


def do_make_basefile(
    basefilesdir: Path, basefile: Path, faiconfigdir: Path, dryrun: bool = False
):
    basefilefull = basefilesdir / basefile

    if not basefilefull.is_file():
        logging.info(
            f"[INFO] Basefile {str(basefilefull)} is outdated or missing - running mk-basefile"
        )

        basefile_base, basefile_ext = split_multi_ext(basefile)

        subprocess_run_wrapper(
            cmd=(f"{str(faiconfigdir)}/basefiles/mk-basefile " f"-J {basefile_base}"),
            dryrun=dryrun,
            cwd=basefilesdir,
        )

    else:
        logging.info(f"[INFO] Basefile {str(basefilefull)} already exists")


def do_make_fainfsroot(
    fainfsrootdir: Path, basefilesdir: Path, basefile: Path, dryrun: bool = False
):
    marker_file = fainfsrootdir / ".THIS_IS_THE_FAI_NFSROOT"

    basefilefull = basefilesdir / basefile

    if not marker_file.is_file():
        logging.info(
            "[INFO] NFSROOT {str(fainfsrootdir)} is outdated or missing — running fai-make-nfsroot"
        )

        hooks_dir = Path("/etc/fai/nfsroot-hooks")
        hooks_dir.mkdir(parents=True, exist_ok=True)

        src = Path("/usr/local/etc/50-add-btrfs")
        dest = hooks_dir / src.name
        shutil.copy2(src, dest)

        # chmod +x
        mode = dest.stat().st_mode
        dest.chmod(mode | 0o111)

        subprocess_run_wrapper(
            cmd=("fai-make-nfsroot " f"-B {basefilefull} " "-N " "-f " "-v"),
            dryrun=dryrun,
        )

    else:
        logging.info(f"[INFO] NFSROOT {str(fainfsrootdir)} already exists")


def do_build_iso(
    faiclasses: list,
    hostconf: dict,
    faiconfigdir: Path,
    faimirrordir: Path,
    outputdir: Path,
    dryrun: bool = False,
):
    classesfile = faiconfigdir / "class" / "50-host-classes"

    keymap = str(hostconf["keymap"])
    timezone = str(hostconf["timezone"])
    rootpw = str(hostconf["rootpw"])
    username = str(hostconf["username"])
    userpw = str(hostconf["userpw"])
    diskpath = Path(hostconf["diskpath"])
    rootsizemib = int(hostconf["rootsizemib"])
    outfile = Path(hostconf["outfile"])

    logging.info(f"keymap: {keymap}")
    logging.info(f"timezone: {timezone}")
    logging.info("rootpw: hidden")
    logging.info(f"username: {username}")
    logging.info("userpw: hidden")
    logging.info(f"diskpath: {diskpath}")
    logging.info(f"rootsizemib: {rootsizemib}")
    logging.info(f"outfile: {outfile}")

    content = (
        "#!/bin/bash\n"
        "# generated by faibuilder\n"
        f"echo '{' '.join(faiclasses)} FAIBUILDER'\n"
    )
    if dryrun:
        print(f"[DRYRUN] Writing to {classesfile}: {content.strip()}")
    else:
        classesfile.write_text(content)

    # chmod +x
    classesfilemode = classesfile.stat().st_mode
    classesfile.chmod(classesfilemode | 0o111)

    storageenvfile = faiconfigdir / "class" / "FAIBUILDER.var"
    content = (
        "# generated by faibuilder\n"
        f"KEYMAP='{keymap}'\n"
        f"TIMEZONE='{timezone}'\n"
        f"ROOTPW='{rootpw}'\n"
        f"username='{username}'\n"
        f"USERPW='{userpw}'\n"
        f"DISKPATH='{str(diskpath)}'\n"
        f"ROOTSIZEMIB='{int(rootsizemib)}'\n"
    )

    if dryrun:
        print(f"[DRYRUN] write {storageenvfile}\n{content}")
    else:
        storageenvfile.write_text(content)

    # chmod +x
    storageenvfilemode = storageenvfile.stat().st_mode
    storageenvfile.chmod(storageenvfilemode | 0o111)

    subprocess_run_wrapper(
        cmd=(
            "fai-cd "
            f"-g {str(faiconfigdir)}/grub.cfg "
            f"-m '{str(faimirrordir)}' "
            f"'{str(outputdir / outfile)}'"
        ),
        dryrun=dryrun,
    )


def main():
    dryrun = False
    logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")

    # globalconffile = get_path(GLOBALCONF)
    hostconffile = get_path(HOSTCONF)
    basefilesdir = get_path(BASEFILESDIRPATH)
    faiconfigdir = get_path(FAICONFIGDIRPATH)
    faimirrordir = get_path(FAIMIRRORDIRPATH)
    fainfsrootdir = get_path(FAINFSROOTDIRPATH)
    outputdir = get_path(OUTPUTDIRPATH)

    # if not is_readable_file(file=globalconffile):
    #    logging.error(f"Config file not found or not readable: {str(globalconffile)}")
    #    sys.exit(1)

    # with globalconffile.open("r") as f:
    #    globalconf = json.load(f)

    if not is_readable_file(file=hostconffile):
        logging.error(f"Config file not found or not readable: {str(hostconffile)}")
        sys.exit(1)

    with hostconffile.open("r") as f:
        hostconf = json.load(f)

    logging.info(f"hostconf:\n{json.dumps(hostconf, indent=2)}")

    faiclasses = hostconf["faiclasses"]
    basefile = Path(hostconf["basefile"])

    logging.info(f"faiclasses: {faiclasses}")
    logging.info(f"basefile: {basefile}")

    # 0
    root_uid = pwd.getpwnam("root").pw_uid
    root_gid = grp.getgrnam("root").gr_gid

    for d in [basefilesdir, faimirrordir, fainfsrootdir, outputdir]:
        if d.exists():
            os.chown(d, root_uid, root_gid)
            d.chmod(0o755)
        else:
            logging.info(f"[WARN] Directory does not exist: {d}")

    do_faimirror(faiclasses=faiclasses, faimirrordir=faimirrordir, dryrun=dryrun)
    do_make_basefile(
        basefilesdir=basefilesdir,
        basefile=basefile,
        faiconfigdir=faiconfigdir,
        dryrun=dryrun,
    )
    do_make_fainfsroot(
        fainfsrootdir=fainfsrootdir,
        basefilesdir=basefilesdir,
        basefile=basefile,
        dryrun=dryrun,
    )
    do_build_iso(
        faiclasses=faiclasses,
        hostconf=hostconf,
        faiconfigdir=faiconfigdir,
        faimirrordir=faimirrordir,
        outputdir=outputdir,
        dryrun=dryrun,
    )


if __name__ == "__main__":
    main()
