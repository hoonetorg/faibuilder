#!/usr/bin/env -S python3 -u
import logging

import http.server
import socketserver
import threading

import os
import sys
import subprocess
import shlex
import shutil
import time

from pathlib import Path

import pwd
import grp

import json

BASEFILESDIRPATH = "/srv/fai/basefiles"
FAIETCDIRPATH = "/srv/fai/etc"
FAICONFIGDIRPATH = "/srv/fai/config"
FAIMIRRORDIRPATH = "/srv/fai/mirror"
FAINFSETCDIRPATH = "/srv/fai/nfsetc"
FAINFSROOTDIRPATH = "/srv/fai/nfsroot"
OUTPUTDIRPATH = "/srv/fai/output"
GLOBALCONF = "/srv/fai/faibuilder.json"
HOSTCONF = "/srv/fai/host.json"


def subprocess_run_wrapper(
    cmd: str, dryrun: bool = False, **kwargs
) -> subprocess.CompletedProcess | None:
    if kwargs.get("shell"):
        wcmd = cmd
    else:
        wcmd = shlex.split(cmd)

    if dryrun:
        logging.info(f"[DRYRUN] {cmd}")
        return None

    logging.info(f"[EXECUTING] {cmd}")
    return subprocess.run(wcmd, **kwargs)


def subprocess_Popen_wrapper(
    cmd: str, dryrun: bool = False, **kwargs
) -> subprocess.Popen | None:
    if kwargs.get("shell"):
        wcmd = cmd
    else:
        wcmd = shlex.split(cmd)

    if dryrun:
        logging.info(f"[DRYRUN] {cmd}")
        return None

    logging.info(f"[EXECUTING] {cmd}")
    return subprocess.Popen(wcmd, **kwargs)


def get_path(path):
    return Path(path).expanduser().absolute()


def split_multi_ext(path: Path):
    suffixes = "".join(path.suffixes)
    if suffixes:
        stem = path.name[: -len(suffixes)]
        ext = suffixes.lstrip(".")
    else:
        stem = path.name
        ext = ""
    return stem, ext


def is_readable_file(file: Path) -> bool:
    return file.exists() and file.is_file() and os.access(file, os.R_OK)


def copy_all_files_from_dir(srcdir: Path, srcglob: str, tgtdir: Path) -> list:
    cleanupfiles = []
    if srcdir.exists():
        tgtdir.mkdir(parents=True, exist_ok=True)
        srcfiles = srcdir.glob(srcglob)
        for f in srcfiles:
            t = tgtdir / f.name
            if not t.exists():
                cleanupfiles.append(t)
                logging.info(f"Copying {shlex.quote(str(f))} to {shlex.quote(str(t))}")
                shutil.copy2(f, t)
            else:
                logging.info(
                    f"Not overwriting {shlex.quote(str(t))} with {shlex.quote(str(f))}"
                )

    return cleanupfiles


def reset_apt_sources(faietcdir: Path):
    dirs = [Path("/etc/apt"), Path("/etc/fai/apt")]

    for d in dirs:
        sl = d / "sources.list"
        if sl.exists():
            sl.unlink()
            logging.info(f"Deleted {sl}")

        sldir = d / "sources.list.d"
        if sldir.exists():
            for f in sldir.glob("*.list"):
                f.unlink()
                logging.info(f"Deleted {f}")
            for f in sldir.glob("*.sources"):
                f.unlink()
                logging.info(f"Deleted {f}")

        copy_all_files_from_dir(
            srcdir=faietcdir / "apt", srcglob="sources.list", tgtdir=d
        )

        copy_all_files_from_dir(
            srcdir=faietcdir / "apt" / "sources.list.d",
            srcglob="*.list",
            tgtdir=d / "sources.list.d",
        )

        copy_all_files_from_dir(
            srcdir=faietcdir / "apt" / "sources.list.d",
            srcglob="*.sources",
            tgtdir=d / "sources.list.d",
        )

    nfsroot_conf = Path("/etc/fai/nfsroot.conf")
    if nfsroot_conf.exists():
        nfsroot_conf.unlink()
        logging.info(f"Deleted {nfsroot_conf}")

    copy_all_files_from_dir(
        srcdir=faietcdir, srcglob="nfsroot.conf", tgtdir=Path("/etc/fai")
    )


def do_start_acng(fainfsrootdir: Path, basefilesdir: Path, dryrun: bool = False):
    acng = subprocess_Popen_wrapper(
        "/usr/sbin/apt-cacher-ng -c /etc/apt-cacher-ng ForeGround=1", dryrun=dryrun
    )

    if acng is not None:
        logging.info(f"apt-cacher-ng started with PID {acng.pid}")
        time.sleep(2)

    return acng


class ThreadedHTTPServer:
    def __init__(self, root: str, port: int):
        os.chdir(root)
        handler = http.server.SimpleHTTPRequestHandler
        self.httpd = socketserver.TCPServer(("", port), handler)
        self.thread = threading.Thread(target=self.httpd.serve_forever, daemon=True)

    def start(self):
        logging.info(
            f"Serving {os.getcwd()} on http://0.0.0.0:{self.httpd.server_address[1]}"
        )
        self.thread.start()

    def stop(self):
        logging.info("Stopping HTTP server")
        self.httpd.shutdown()
        self.httpd.server_close()
        self.thread.join()


def do_faimirror(
    faiclasses: list, faietcdir: Path, faimirrordir: Path, dryrun: bool = False
):
    faimirrormarker = faimirrordir / "mirror-is-up-to-date"

    logging.info("Checking mirror freshness")

    if faimirrormarker.is_file():
        logging.info(
            f"Mirror is up to date, faimirror marker file is existing {shlex.quote(str(faimirrormarker))}"
        )
        return

    logging.info(
        f"Mirror is outdated or missing, faimirror marker file {shlex.quote(str(faimirrormarker))} is not a file - running fai-mirror"
    )

    subprocess_run_wrapper(
        cmd=(
            "fai-mirror -b -m1 "
            f"-C {shlex.quote(str(faietcdir))} "
            f"-c '{','.join(faiclasses)},GRUB_PC,GRUB_EFI,AMD64,FB' "
            f"{shlex.quote(str(faimirrordir))}"
        ),
        dryrun=dryrun,
    )

    if not dryrun:
        logging.info(
            f"Mirror finished, touching faimirror marker file: {shlex.quote(str(faimirrormarker))}"
        )
        faimirrormarker.touch()


def do_make_basefile(
    basefilesdir: Path, basefile: Path, faiconfigdir: Path, dryrun: bool = False
):
    basefilefull = basefilesdir / basefile

    logging.info(f"Checking if basefile {shlex.quote(str(basefilefull))} exists")

    if basefilefull.is_file():
        logging.info(f"Basefile {shlex.quote(str(basefilefull))} already exists")
        return

    logging.info(
        f"Basefile {shlex.quote(str(basefilefull))} is outdated or missing - running mk-basefile"
    )

    basefilebase, basefileext = split_multi_ext(basefile)

    subprocess_run_wrapper(
        cmd=(
            f"{shlex.quote(str(faiconfigdir / 'basefiles' / 'mk-basefile'))} -J {shlex.quote(str(basefilebase))}"
        ),
        dryrun=dryrun,
        cwd=basefilesdir,
    )


def do_make_fainfsroot(
    faietcdir: Path,
    fainfsrootdir: Path,
    basefilesdir: Path,
    basefile: Path,
    dryrun: bool = False,
):
    fainfsrootmarker = fainfsrootdir / ".THIS_IS_THE_FAI_NFSROOT"

    basefilefull = basefilesdir / basefile

    logging.info("Checking NFSROOT freshness")

    if fainfsrootmarker.is_file():
        logging.info(
            f"NFSROOT seems to be ready - fainfsroot marker file {shlex.quote(str(fainfsrootmarker))} already exists"
        )
        return

    logging.info(
        f"NFSROOT is outdated or missing fainfsroot marker file {shlex.quote(str(fainfsrootmarker))} is not a file - running fai-make-nfsroot"
    )

    hooksdir = Path("/etc/fai/nfsroot-hooks")

    logging.info(f"Creating {shlex.quote(str(hooksdir))}")
    hooksdir.mkdir(parents=True, exist_ok=True)

    src = Path("/usr/local/etc/50-add-btrfs")
    dest = hooksdir / src.name

    logging.info(
        f"Copying {shlex.quote(str(src))} to {shlex.quote(str(dest))} and make it executable"
    )
    shutil.copy2(src, dest)

    # chmod +x
    mode = dest.stat().st_mode
    dest.chmod(mode | 0o111)

    logging.info(
        f"Content of {shlex.quote(str(dest))}:\n{str(dest.read_text(encoding='utf-8'))}"
    )

    subprocess_run_wrapper(
        cmd=(
            f"fai-make-nfsroot -C {shlex.quote(str(faietcdir))} -B {shlex.quote(str(basefilefull))} -N -f -v"
        ),
        dryrun=dryrun,
    )


def do_build_iso(
    faiclasses: list,
    hostconf: dict,
    faietcdir: Path,
    faiconfigdir: Path,
    faimirrordir: Path,
    outputdir: Path,
    dryrun: bool = False,
):

    classesfile = faiconfigdir / "class" / "50-host-classes"

    keymap = str(hostconf["keymap"])
    timezone = str(hostconf["timezone"])
    rootpw = str(hostconf["rootpw"])
    username = str(hostconf["username"])
    userpw = str(hostconf["userpw"])
    diskpath = Path(hostconf["diskpath"])
    rootsizemib = int(hostconf["rootsizemib"])
    cryptpw = str(hostconf["cryptpw"])
    outfile = Path(hostconf["outfile"])

    outfilefull = outputdir / outfile

    if outfilefull.is_file():
        logging.info(
            f"ISO already exists: {shlex.quote(str(outfilefull))} - refusing to overwrite."
        )
        return

    logging.info(f"Building FAI ISO {shlex.quote(str(outfilefull))} with faicd")

    logging.info("hostconf:")
    logging.info(f"keymap: {str(keymap)}")
    logging.info(f"timezone: {str(timezone)}")
    logging.info("rootpw: hidden")
    logging.info(f"username: {str(username)}")
    logging.info("userpw: hidden")
    logging.info(f"diskpath: {shlex.quote(str(diskpath))}")
    logging.info(f"rootsizemib: {int(rootsizemib)}")
    logging.info("cryptpw: hidden")
    logging.info(f"outfile: {shlex.quote(str(outfile))}")

    content = (
        "#!/bin/bash\n"
        "# generated by faibuilder\n"
        f"echo '{' '.join(faiclasses)} FB'\n"
    )
    if dryrun:
        logging.info(
            f"[DRYRUN] Would write to {shlex.quote(str(classesfile))}:\n{content.strip()}"
        )
    else:
        logging.info(f"Writing to {shlex.quote(str(classesfile))}:\n{content.strip()}")
        classesfile.write_text(content)

    logging.info(f"Making {shlex.quote(str(classesfile))} executable")
    classesfilemode = classesfile.stat().st_mode
    classesfile.chmod(classesfilemode | 0o111)

    variablesfile = faiconfigdir / "class" / "FB.var"
    content = (
        "# generated by faibuilder\n"
        f"KEYMAP='{str(keymap)}'\n"
        f"TIMEZONE='{str(timezone)}'\n"
        f"ROOTPW={shlex.quote(str(rootpw))}\n"
        f"username='{str(username)}'\n"
        f"USERPW={shlex.quote(str(userpw))}\n"
        f"DISKPATH={shlex.quote(str(diskpath))}\n"
        f"CRYPTPW={shlex.quote(str(cryptpw))}\n"
        f"ROOTSIZEMIB='{int(rootsizemib)}'\n"
    )

    if dryrun:
        logging.info(
            f"[DRYRUN] Would write to {shlex.quote(str(variablesfile))}\n{content.strip()}"
        )
    else:
        logging.info(f"Writing to {shlex.quote(str(variablesfile))}\n{content.strip()}")
        variablesfile.write_text(content)

    subprocess_run_wrapper(
        cmd=(
            "fai-cd "
            f"-C {shlex.quote(str(faietcdir))} "
            f"-g {shlex.quote(str(faiconfigdir / 'grub.cfg'))} "
            f"-m {shlex.quote(str(faimirrordir))} "
            f"{shlex.quote(str(outfilefull))}"
        ),
        dryrun=dryrun,
    )

    imgfilefull = outfilefull.with_suffix(".img")

    if imgfilefull.is_file():
        logging.info(
            f"Now that we created an ISO {shlex.quote(str(outfilefull))}, delete {shlex.quote(str(imgfilefull))}, because it is outdated"
        )
        imgfilefull.unlink()

    for f in [classesfile, variablesfile]:
        if f.is_file():
            logging.info(f"Cleanup {shlex.quote(str(f))}")
            f.unlink()


def do_build_img_from_iso(
    isofilefull: Path,
    dryrun: bool = False,
):

    imgfilefull = isofilefull.with_suffix(".img")

    if imgfilefull.is_file():
        logging.info(
            f"IMG already exists: {shlex.quote(str(imgfilefull))} - refusing to overwrite."
        )
        return

    logging.info(
        f"Creating IMG file {shlex.quote(str(imgfilefull))} from ISO file {shlex.quote(str(isofilefull))}"
    )

    if not is_readable_file(file=isofilefull):
        logging.error(
            f"\nISO file {shlex.quote(str(isofilefull))} does not exist - Exiting"
        )
        sys.exit(1)

    logging.info(f"Processing file: {shlex.quote(str(isofilefull))}")

    isopath = Path("/iso")
    efipath = Path("/efi")
    cdpath = Path("/cd")

    for p in {isopath, efipath, cdpath}:
        p.mkdir(parents=True, exist_ok=True)

    imagesizegb = 3
    efilabel = "EFI"
    cdlabel = "FAI_CD"

    logging.info("Mounting ISO contents")
    subprocess_run_wrapper(
        cmd=(
            f"mount -o loop,ro {shlex.quote(str(isofilefull))} {shlex.quote(str(isopath))}"
        ),
        dryrun=dryrun,
    )

    logging.info("Creating disk image")
    subprocess_run_wrapper(
        cmd=(
            f"qemu-img create -f raw -o preallocation=off {shlex.quote(str(imgfilefull))} {int(imagesizegb)}G"
        ),
        dryrun=dryrun,
    )

    logging.info("Partitioning the disk")
    subprocess_run_wrapper(
        cmd=(
            "parted --script "
            f"{shlex.quote(str(imgfilefull))} "
            "mklabel gpt "
            "mkpart primary fat32 1MiB 125MiB "
            "mkpart primary ext4 125MiB 100%"
        ),
        dryrun=dryrun,
    )

    logging.info("Mapping partitions")
    try:
        result = subprocess_run_wrapper(
            cmd=(f"losetup --show -fP {shlex.quote(str(imgfilefull))}"),
            dryrun=dryrun,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            check=True,
        )

        loopdevice = Path(result.stdout.strip())
        logging.info(f"loopdevice:\n{shlex.quote(str(loopdevice))}")
    except subprocess.CalledProcessError as err:
        logging.error(f"losetup failed: {err.stderr}")
        sys.exit(1)

    subprocess_run_wrapper(
        cmd=(f"kpartx -av {shlex.quote(str(loopdevice))}"),
        dryrun=dryrun,
    )

    part1 = Path("/dev/mapper") / (loopdevice.name + "p1")
    part2 = Path("/dev/mapper") / (loopdevice.name + "p2")

    logging.info("Formatting and mounting partitions")

    subprocess_run_wrapper(
        cmd=(f"mkfs.vfat -F 32 -n {efilabel} {shlex.quote(str(part1))}"),
        dryrun=dryrun,
    )
    subprocess_run_wrapper(
        cmd=(f"mount {shlex.quote(str(part1))} {shlex.quote(str(efipath))}"),
        dryrun=dryrun,
    )
    # subprocess_run_wrapper(
    #     cmd=(f"mkfs.ext4 -L {cdlabel} {shlex.quote(str(part2))}"),
    #     dryrun=dryrun,
    # )
    subprocess_run_wrapper(
        cmd=(
            f"mkfs.btrfs --data single --metadata dup -L {cdlabel} {shlex.quote(str(part2))}"
        ),
        dryrun=dryrun,
    )
    subprocess_run_wrapper(
        cmd=(f"mount {shlex.quote(str(part2))} {shlex.quote(str(cdpath))}"),
        dryrun=dryrun,
    )

    subprocess_run_wrapper(
        cmd=(
            "grub-install "
            f"--efi-directory={shlex.quote(str(efipath))} "
            f"--boot-directory={shlex.quote(str(efipath))} "
            "--target=x86_64-efi "
            "--no-nvram "
            "--removable "
            "--uefi-secure-boot "
        ),
        dryrun=dryrun,
    )

    subprocess_run_wrapper(
        cmd=(
            "rsync "
            "-av "
            "--exclude=EFI/ "
            f"{shlex.quote(str(isopath) + '/')} "
            f"{shlex.quote(str(cdpath) + '/')}"
        ),
        dryrun=dryrun,
    )

    (efipath / "EFI" / "BOOT").mkdir(parents=True, exist_ok=True)

    subprocess_run_wrapper(
        cmd=(
            "rsync "
            "-av "
            "/usr/local/etc/grub.cfg "
            f"{shlex.quote(str(efipath / 'EFI' / 'BOOT'))} "
        ),
        dryrun=dryrun,
    )

    subprocess_run_wrapper(
        cmd=(f"umount {shlex.quote(str(efipath))}"),
        dryrun=dryrun,
    )

    subprocess_run_wrapper(
        cmd=(f"umount {shlex.quote(str(cdpath))}"),
        dryrun=dryrun,
    )

    logging.info("Cleaning up")
    subprocess_run_wrapper(
        cmd=(f"kpartx -d {shlex.quote(str(loopdevice))}"),
        dryrun=dryrun,
    )

    subprocess_run_wrapper(
        cmd=(f"losetup -d {shlex.quote(str(loopdevice))}"),
        dryrun=dryrun,
    )

    subprocess_run_wrapper(
        cmd=(f"umount {shlex.quote(str(isopath))}"),
        dryrun=dryrun,
    )

    logging.info(f"Disk image {imgfilefull} created successfully")


def main():
    dryrun = False
    logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")

    basefilesdir = get_path(BASEFILESDIRPATH)
    faietcdir = get_path(FAIETCDIRPATH)
    faiconfigdir = get_path(FAICONFIGDIRPATH)
    faimirrordir = get_path(FAIMIRRORDIRPATH)
    fainfsetcdir = get_path(FAINFSETCDIRPATH)
    fainfsrootdir = get_path(FAINFSROOTDIRPATH)
    outputdir = get_path(OUTPUTDIRPATH)

    logging.info(f"basefilesdir: {shlex.quote(str(basefilesdir))}")
    logging.info(f"faietcdir: {shlex.quote(str(faietcdir))}")
    logging.info(f"faiconfigdir: {shlex.quote(str(faiconfigdir))}")
    logging.info(f"faimirrordir: {shlex.quote(str(faimirrordir))}")
    logging.info(f"fainfsetcdir: {shlex.quote(str(fainfsetcdir))}")
    logging.info(f"fainfsrootdir: {shlex.quote(str(fainfsrootdir))}")
    logging.info(f"outputdir: {shlex.quote(str(outputdir))}")

    # 0
    root_uid = pwd.getpwnam("root").pw_uid
    root_gid = grp.getgrnam("root").gr_gid

    for d in [basefilesdir, faimirrordir, fainfsrootdir, outputdir]:
        if d.exists():
            os.chown(d, root_uid, root_gid)
            d.chmod(0o755)
        else:
            logging.info(f"[WARN] Directory does not exist: {shlex.quote(str(d))}")

    globalconffile = get_path(GLOBALCONF)
    if not is_readable_file(file=globalconffile):
        logging.error(
            f"Config file not found or not readable: {shlex.quote(str(globalconffile))}"
        )
        sys.exit(1)
    logging.info(f"globalconffile: {shlex.quote(str(globalconffile))}")
    globalconf = json.loads(globalconffile.read_text(encoding="utf-8"))
    logging.info(f"globalconf:\n{json.dumps(globalconf, indent=2)}")

    basefilenfs = Path(globalconf["basefilenfs"])
    logging.info(f"basefilenfs: {basefilenfs}")

    hostconffile = get_path(HOSTCONF)
    if not is_readable_file(file=hostconffile):
        logging.error(
            f"Config file not found or not readable: {shlex.quote(str(hostconffile))}"
        )
        sys.exit(1)
    logging.info(f"hostconffile: {shlex.quote(str(hostconffile))}")
    hostconf = json.loads(hostconffile.read_text(encoding="utf-8"))
    logging.info(f"hostconf:\n{json.dumps(hostconf, indent=2)}")

    faiclasses = hostconf["faiclasses"]
    basefile = Path(hostconf["basefile"])
    basefileclass = hostconf["basefileclass"]
    outfile = Path(hostconf["outfile"])

    logging.info(f"faiclasses: {faiclasses}")
    logging.info(f"basefile: {shlex.quote(str(basefile))}")
    logging.info(f"outfile: {shlex.quote(str(outfile))}")

    reset_apt_sources(faietcdir=fainfsetcdir)

    cleanupfiles = []
    installcleanupfiles = []
    nfscleanupfiles = []

    for etcdir in [faietcdir, fainfsetcdir]:
        cleanupfiles.extend(
            copy_all_files_from_dir(
                srcdir=etcdir / "apt" / "trusted.gpg.d",
                srcglob="*.gpg",
                tgtdir=Path("/etc/apt/trusted.gpg.d"),
            )
        )
        cleanupfiles.extend(
            copy_all_files_from_dir(
                srcdir=etcdir / "apt" / "trusted.gpg.d",
                srcglob="*.gpg",
                tgtdir=Path("/usr/share/keyrings"),
            )
        )
        cleanupfiles.extend(
            copy_all_files_from_dir(
                srcdir=etcdir / "apt-cacher-ng",
                srcglob="*.conf",
                tgtdir=Path("/etc/apt-cacher-ng"),
            )
        )

    acng = do_start_acng(
        fainfsrootdir=fainfsrootdir, basefilesdir=basefilesdir, dryrun=dryrun
    )

    server = ThreadedHTTPServer(root="/var/cache/apt-cacher-ng", port=8000)
    server.start()

    installcleanupfiles.extend(
        copy_all_files_from_dir(
            srcdir=faietcdir / "apt" / "apt.conf.d",
            srcglob="*.conf",
            tgtdir=Path("/etc/apt/apt.conf.d"),
        )
    )

    installcleanupfiles.extend(
        copy_all_files_from_dir(
            srcdir=faietcdir,
            srcglob="mk-basefile.conf",
            tgtdir=Path("/etc/fai"),
        )
    )

    do_faimirror(
        faiclasses=faiclasses,
        faietcdir=faietcdir,
        faimirrordir=faimirrordir,
        dryrun=dryrun,
    )

    do_make_basefile(
        basefilesdir=basefilesdir,
        basefile=basefile,
        faiconfigdir=faiconfigdir,
        dryrun=dryrun,
    )

    for f in installcleanupfiles:
        if f.exists and (f.is_file() or f.is_dir()):
            logging.info(f"Deleting {shlex.quote(str(f))}")
            f.unlink()

    nfscleanupfiles.extend(
        copy_all_files_from_dir(
            srcdir=fainfsetcdir / "apt" / "apt.conf.d",
            srcglob="*.conf",
            tgtdir=Path("/etc/apt/apt.conf.d"),
        )
    )

    nfscleanupfiles.extend(
        copy_all_files_from_dir(
            srcdir=fainfsetcdir,
            srcglob="mk-basefile.conf",
            tgtdir=Path("/etc/fai"),
        )
    )

    do_make_basefile(
        basefilesdir=basefilesdir,
        basefile=basefilenfs,
        faiconfigdir=faiconfigdir,
        dryrun=dryrun,
    )

    do_make_fainfsroot(
        faietcdir=fainfsetcdir,
        fainfsrootdir=fainfsrootdir,
        basefilesdir=basefilesdir,
        basefile=basefilenfs,
        dryrun=dryrun,
    )

    for f in nfscleanupfiles:
        if f.exists and (f.is_file() or f.is_dir()):
            logging.info(f"Deleting {shlex.quote(str(f))}")
            f.unlink()

    basefilefull = basefilesdir / basefile
    basefiledest = faiconfigdir / "basefiles" / f"{basefileclass}.tar.xz"
    logging.info(
        f"Copying {shlex.quote(str(basefilefull))} to {shlex.quote(str(basefiledest))}"
    )
    shutil.copy2(basefilefull, basefiledest)

    do_build_iso(
        faiclasses=faiclasses,
        hostconf=hostconf,
        faietcdir=faietcdir,
        faiconfigdir=faiconfigdir,
        faimirrordir=faimirrordir,
        outputdir=outputdir,
        dryrun=dryrun,
    )

    do_build_img_from_iso(
        isofilefull=outputdir / outfile,
        dryrun=dryrun,
    )

    logging.info(f"Deleting {shlex.quote(str(basefiledest))}")
    basefiledest.unlink()

    server.stop()

    acng.terminate()
    acng.wait()

    for f in cleanupfiles:
        if f.exists and (f.is_file() or f.is_dir()):
            logging.info(f"Deleting {shlex.quote(str(f))}")
            f.unlink()

    logging.info("Script finished.")


if __name__ == "__main__":
    main()
