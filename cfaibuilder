#!/usr/bin/env -S python3 -u

import argparse

import logging

from pathlib import Path
import sys
import subprocess
import shlex

import json


APPNAME = "faibuilder"
IMAGENAME = f"{APPNAME}"
CONTAINERFILE = "Containerfile"
WORKSPACE = Path(f"/{APPNAME}")


def subprocess_run_wrapper(
    cmd: str, dryrun: bool = False, **kwargs
) -> subprocess.CompletedProcess | None:
    if kwargs.get("shell"):
        wcmd = cmd
    else:
        wcmd = shlex.split(cmd)

    if dryrun:
        logging.info(f"[DRYRUN] {cmd}")
        return None

    logging.info(f"[EXECUTING] {cmd}")
    return subprocess.run(wcmd, **kwargs)


def get_path(path):
    return Path(path).expanduser().absolute()


def build_image(sourcedir, dryrun: bool = False):
    subprocess_run_wrapper(
        cmd=(
            "podman build "
            f"-t {shlex.quote(IMAGENAME)} "
            f"-f {shlex.quote(str(sourcedir / Path(CONTAINERFILE)))}"
        ),
        dryrun=dryrun,
        check=True,
    )


def release(imagedir, args, dryrun: bool = False):
    #            f"-v {str(imagedir)}:{str(WORKSPACE)}:Z "
    subprocess_run_wrapper(
        cmd=(
            "podman run "
            f"-name {shlex.quote(IMAGENAME)} "
            "--rm"
            f"-w {shlex.quote(str(WORKSPACE))} "
            "--entrypoint release "
            f"{shlex.quote(IMAGENAME)} "
            f"{' '.join(args)}"
        ),
        dryrun=dryrun,
        check=True,
    )


def build(
    interactive,
    globalconffile,
    hostconffile,
    basefilesdir,
    faiconfigdir,
    faimirrordir,
    fainfsrootdir,
    outputdir,
    args,
    dryrun: bool = False,
):
    ctrargs = "--rm "
    if interactive:
        ctrargs += "-it --entrypoint /bin/bash "

    #        "-v /dev:/dev "
    #        f"-v {str(imagedir)}:{str(WORKSPACE)}:Z "
    subprocess_run_wrapper(
        cmd=(
            "podman "
            "run "
            f"--name {shlex.quote(str(IMAGENAME))} "
            "--privileged "
            f"{ctrargs}"
            f"-w {shlex.quote(str(WORKSPACE))} "
            f"-v {shlex.quote(str(globalconffile))}:/srv/fai/faibuilder.json:ro,z "
            f"-v {shlex.quote(str(hostconffile))}:/srv/fai/host.json:ro,z "
            f"-v {shlex.quote(str(basefilesdir))}:/srv/fai/basefiles:z "
            f"-v {shlex.quote(str(faiconfigdir))}:/srv/fai/config:z "
            f"-v {shlex.quote(str(faimirrordir))}:/srv/fai/mirror:z "
            f"-v {shlex.quote(str(fainfsrootdir))}:/srv/fai/nfsroot:z "
            f"-v {shlex.quote(str(outputdir))}:/srv/fai/output:z "
            f"{shlex.quote(str(IMAGENAME))} "
            f"{' '.join(args)}"
        ),
        dryrun=dryrun,
        check=True,
    )


if __name__ == "__main__":
    dryrun = False
    logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")

    parser = argparse.ArgumentParser(description="Run faibuilder in container")
    parser.add_argument(
        "--build", action="store_true", help=f"Build {IMAGENAME} container"
    )
    parser.add_argument(
        "--sourcedir",
        type=str,
        default=".",
        help="sourcedir for building container (default '.')",
    )
    parser.add_argument(
        "--interactive",
        action="store_true",
        help="Run container in interactive mode with /bin/bash",
    )
    parser.add_argument(
        "--globalconffile",
        type=str,
        default=f"./{APPNAME}.json",
        help=f"{APPNAME} config file (default './{APPNAME}.json')",
    )
    parser.add_argument(
        "--hostconffile",
        type=str,
        default="./host.json",
        help="Host config file (default './host.json')",
    )

    args, passthrough = parser.parse_known_args()

    sourcedir = get_path(args.sourcedir)

    logging.info(f"sourcedir: {str(sourcedir)}")

    if args.build:
        build_image(sourcedir=sourcedir, dryrun=dryrun)
        sys.exit(0)

    globalconffile = get_path(args.globalconffile)
    hostconffile = get_path(args.hostconffile)

    logging.info(f"globalconffile: {str(globalconffile)}")
    logging.info(f"hostconffile: {str(hostconffile)}")

    with globalconffile.open("r") as f:
        globalconf = json.load(f)

    logging.info(f"globalconf:\n{json.dumps(globalconf, indent=2)}")

    with hostconffile.open("r") as f:
        hostconf = json.load(f)

    logging.info(f"hostconf:\n{json.dumps(hostconf, indent=2)}")

    basefilesdir = get_path(globalconf["basefilesdir"])
    faiconfigdir = get_path(globalconf["faiconfigdir"])
    faimirrordir = get_path(globalconf["faimirrordir"])
    fainfsrootdir = get_path(globalconf["fainfsrootdir"])
    outputdir = get_path(globalconf["outputdir"])

    logging.info(f"basefilesdir: {str(basefilesdir)}")
    logging.info(f"faiconfigdir: {str(faiconfigdir)}")
    logging.info(f"faimirrordir: {str(faimirrordir)}")
    logging.info(f"fainfsrootdir: {str(fainfsrootdir)}")
    logging.info(f"outputdir: {str(outputdir)}")

    build(
        interactive=args.interactive,
        globalconffile=globalconffile,
        hostconffile=hostconffile,
        basefilesdir=basefilesdir,
        faiconfigdir=faiconfigdir,
        faimirrordir=faimirrordir,
        fainfsrootdir=fainfsrootdir,
        outputdir=outputdir,
        args=passthrough,
        dryrun=dryrun,
    )
